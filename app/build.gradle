plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'kotlin-parcelize'
}

android {
  namespace "com.nononsenseapps.feeder"
  defaultConfig {
    applicationId "com.nononsenseapps.feeder"
    versionCode 253
    versionName "2.3.3"
    compileSdkVersion 33
    minSdkVersion 23
    targetSdkVersion 33
    multiDexEnabled true

    vectorDrawables.useSupportLibrary = true

    // For espresso tests
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    // Export Room schemas
    javaCompileOptions {
      annotationProcessorOptions {
        arguments = [
                "room.schemaLocation": "$projectDir/schemas".toString(),
                "room.incremental"   : "true"
        ]
      }
    }
  }

  sourceSets {
    // To test Room we need to include the schema dir in resources
    androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
  }

  if (project.hasProperty('STORE_FILE')) {
    signingConfigs {
      release {
        storeFile file(STORE_FILE)
        storePassword STORE_PASSWORD
        keyAlias KEY_ALIAS
        keyPassword KEY_PASSWORD
      }
    }
  }

  buildTypes {
    debug {
      minifyEnabled false
      shrinkResources false
      applicationIdSuffix ".debug"
      pseudoLocalesEnabled true

      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debugMini {
      initWith debug
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android.txt'),
              'proguard-rules.pro'
      matchingFallbacks = ['debug']
    }
    release {
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

      if (project.hasProperty('STORE_FILE')) {
        signingConfig signingConfigs.release
      }
    }
    play {
      applicationIdSuffix ".play"
      minifyEnabled true
      shrinkResources true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

      if (project.hasProperty('STORE_FILE')) {
        signingConfig signingConfigs.release
      }
    }
  }

  testOptions {
    unitTests.returnDefaultValues = true
    managedDevices {
      devices {
        pixel2api30 (com.android.build.api.dsl.ManagedVirtualDevice) {
          // Use device profiles you typically see in Android Studio.
          device = "Pixel 2"
          // ATD currently support only API level 30.
          apiLevel = 30
          // You can also specify "google-atd" if you require Google Play Services.
          systemImageSource = "aosp-atd"
          // Whether the image must be a 64 bit image.
          require64Bit = false
        }
      }
    }
  }

  kotlinOptions {
    jvmTarget = "1.8"
  }

  buildFeatures {
    compose true
    buildConfig true
    aidl false
    renderScript false
    resValues false
    shaders false
  }

  composeOptions {
    kotlinCompilerExtensionVersion composeCompilerVersion
  }
  packagingOptions {
    resources {
      excludes += [
              'META-INF/DEPENDENCIES',
              'META-INF/LICENSE',
              'META-INF/LICENSE.txt',
              'META-INF/license.txt',
              'META-INF/NOTICE',
              'META-INF/NOTICE.txt',
              'META-INF/notice.txt',
              'META-INF/ASL2.0',
              'META-INF/AL2.0',
              'META-INF/LGPL2.1'
      ]
    }
  }

  lint {
    abortOnError true
    disable 'MissingTranslation', 'AppCompatCustomView', 'InvalidPackage'
    error 'InlinedApi', 'StringEscaping'
    explainIssues true
    ignoreWarnings true
    textOutput file('stdout')
    textReport true
  }
}

// https://chris.banes.dev/composable-metrics/
// gw installDebugMini -Pmyapp.enableComposeCompilerReports=true
// build/compose_metrics/[...]-composables.txt
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
  kotlinOptions {
    if (project.findProperty("myapp.enableComposeCompilerReports") == "true") {
      freeCompilerArgs += [
              "-P",
              "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" +
                      project.buildDir.absolutePath + "/compose_metrics"
      ]
      freeCompilerArgs += [
              "-P",
              "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" +
                      project.buildDir.absolutePath + "/compose_metrics"
      ]
    }
  }
}

configurations.all {
  resolutionStrategy {
//    failOnVersionConflict()

    force "com.squareup.okhttp3:okhttp:$okhttp_version"
    force "com.squareup.okio:okio:$okio_version"
    force "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    force "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    force "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    force "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
  }
}

dependencies {
  kapt "androidx.room:room-compiler:$roomVersion"

  // BOMS
  implementation(platform("com.squareup.okhttp3:okhttp-bom:$okhttp_version"))
  implementation("io.coil-kt:coil-bom:$coilVersion")

  // Needed pre SDK21
  implementation "com.android.support:multidex:$multi_dex_version"

  implementation "androidx.room:room-ktx:$roomVersion"
  implementation "androidx.room:room-paging:$roomVersion"

  implementation "androidx.work:work-runtime-ktx:$workmanager_version"

  implementation "androidx.core:core-ktx:$androidx_core_version"
  implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"
  implementation "androidx.appcompat:appcompat:$appcompat_version"
  implementation "androidx.preference:preference:$preference_version"
  implementation "androidx.navigation:navigation-fragment-ktx:$navVersion"
  implementation "androidx.navigation:navigation-ui-ktx:$navVersion"

  // ViewModel
  implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
  implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
  implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
  implementation "androidx.paging:paging-runtime-ktx:$pagingVersion"

  // Compose
  implementation "androidx.activity:activity-compose:$activityComposeVersion"
  implementation "androidx.compose.ui:ui:$composeLibraryVersion"
  implementation "androidx.compose.foundation:foundation:$composeLibraryVersion"
  implementation "androidx.compose.foundation:foundation-layout:$composeLibraryVersion"
  implementation "androidx.compose.material3:material3:$material3Version"
  implementation "androidx.compose.material:material:$composeLibraryVersion"
  implementation "androidx.compose.material:material-icons-extended:$composeLibraryVersion"
  implementation "androidx.compose.runtime:runtime:$composeLibraryVersion"
  implementation "androidx.compose.ui:ui-tooling:$composeLibraryVersion"
  implementation "androidx.window:window:$androidWindowVersion"
  implementation "com.google.android.material:material:$materialVersion"
  implementation "androidx.navigation:navigation-compose:$navigationComposeVersion"
  implementation "androidx.paging:paging-compose:$pagingComposeVersion"
  implementation "com.google.accompanist:accompanist-swiperefresh:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-permissions:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanistVersion"
  implementation "com.google.accompanist:accompanist-navigation-animation:$accompanistVersion"

  // Better times
  implementation "com.jakewharton.threetenabp:threetenabp:$threetenabp_version"
  // HTML parsing
  implementation "org.jsoup:jsoup:$jsoup_version"
  implementation "org.ccil.cowan.tagsoup:tagsoup:$tagsoup_version"
  // RSS
  implementation "com.rometools:rome:$rome_version"
  implementation "com.rometools:rome-modules:$rome_version"
  // JSONFeed
  implementation project(":jsonfeed-parser")

  // For better fetching
  implementation("com.squareup.okhttp3:okhttp")
  // For supporting TLSv1.3 on pre Android-10
  implementation "org.conscrypt:conscrypt-android:$conscrypt_version"
  // Image loading
  implementation("io.coil-kt:coil-base")
  implementation("io.coil-kt:coil-gif")
  implementation("io.coil-kt:coil-svg")
  implementation("io.coil-kt:coil-compose")

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  // Coroutines
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
  // For doing coroutines on UI thread
  implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
  // Dependency injection
  implementation "org.kodein.di:kodein-di-framework-android-x:$kodeinVersion"
//  implementation "org.kodein.di:kodein-di-framework-compose:$kodeinVersion"
  // Custom tabs
  implementation "com.android.support:customtabs:28.0.0"
  // Full text
  implementation "net.dankito.readability4j:readability4j:$readability4j_version"
  // For feeder-sync
  implementation("com.squareup.retrofit2:retrofit:$retrofit_version")
  implementation("com.squareup.retrofit2:converter-moshi:$retrofit_version")
  implementation("com.squareup.moshi:moshi:$moshi_version")
  implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")
  implementation("com.squareup.moshi:moshi-adapters:$moshi_version")
  implementation("com.github.kenglxn.qrgen:android:$qrgen_version")
  // tests
  testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
  testImplementation "junit:junit:$junitVersion"
  testImplementation "org.mockito:mockito-core:$mockito_version"
  testImplementation "io.mockk:mockk:$mockk_version"
  testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

  // Needed for unit testing timezone stuff
  testImplementation "org.threeten:threetenbp:$threetentest_version"

  androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
  androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
  androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
  androidTestImplementation "io.mockk:mockk-android:1.8.10.kotlin13"
  androidTestImplementation "junit:junit:$junitVersion"
  androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

  androidTestImplementation "androidx.test:core:$androidx_testcore_version"
  androidTestImplementation "androidx.test:runner:$test_runner_version"
  androidTestImplementation "androidx.room:room-testing:$roomVersion"
  androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
  androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeLibraryVersion"
  debugImplementation("androidx.compose.ui:ui-test-manifest:$composeLibraryVersion")
}
